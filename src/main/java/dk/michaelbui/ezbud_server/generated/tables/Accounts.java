/*
 * This file is generated by jOOQ.
 */
package dk.michaelbui.ezbud_server.generated.tables;


import dk.michaelbui.ezbud_server.generated.Keys;
import dk.michaelbui.ezbud_server.generated.Public;
import dk.michaelbui.ezbud_server.generated.tables.UserAccount.UserAccountPath;
import dk.michaelbui.ezbud_server.generated.tables.Users.UsersPath;
import dk.michaelbui.ezbud_server.generated.tables.records.AccountsRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.accounts</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>public.accounts.id</code>.
     */
    public final TableField<AccountsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.accounts.name</code>.
     */
    public final TableField<AccountsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.accounts.on_budget</code>.
     */
    public final TableField<AccountsRecord, Boolean> ON_BUDGET = createField(DSL.name("on_budget"), SQLDataType.BOOLEAN, this, "");

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>public.accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    /**
     * Create a <code>public.accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    public <O extends Record> Accounts(Table<O> path, ForeignKey<O, AccountsRecord> childPath, InverseForeignKey<O, AccountsRecord> parentPath) {
        super(path, childPath, parentPath, ACCOUNTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AccountsPath extends Accounts implements Path<AccountsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AccountsPath(Table<O> path, ForeignKey<O, AccountsRecord> childPath, InverseForeignKey<O, AccountsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AccountsPath(Name alias, Table<AccountsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AccountsPath as(String alias) {
            return new AccountsPath(DSL.name(alias), this);
        }

        @Override
        public AccountsPath as(Name alias) {
            return new AccountsPath(alias, this);
        }

        @Override
        public AccountsPath as(Table<?> alias) {
            return new AccountsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.ACCOUNTS_PKEY;
    }

    private transient UserAccountPath _userAccount;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_account</code> table
     */
    public UserAccountPath userAccount() {
        if (_userAccount == null)
            _userAccount = new UserAccountPath(this, null, Keys.USER_ACCOUNT__USER_ACCOUNT_ACCOUNT_ID_FKEY.getInverseKey());

        return _userAccount;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.users</code>
     * table
     */
    public UsersPath users() {
        return userAccount().users();
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    @Override
    public Accounts as(Table<?> alias) {
        return new Accounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Table<?> name) {
        return new Accounts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Condition condition) {
        return new Accounts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
